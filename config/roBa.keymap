#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <2 3 4>;
        };

        Toggle_Scroll {
            bindings = <&tog 5>;
            key-positions = <31 32>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
        };

        return {
            bindings = <&kp RET>;
            key-positions = <29 30>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <13 14>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp F        &kp P             &kp B                                           &kp J            &kp L              &lt 5 U      &kp Y            &mt DOUBLE_QUOTES SQT
&mt LEFT_GUI A    &mt LEFT_ALT R  &mt LCTRL S  &mt LEFT_SHIFT T  &kp G         &kp LS(LG(S))      &kp MINUS      &kp M            &mt RIGHT_SHIFT N  &mt RCTRL E  &mt RIGHT_ALT I  &mt LEFT_GUI O
&mt LEFT_SHIFT Z  &kp X           &kp C        &kp D             &kp V         &kp COLON          &kp SEMICOLON  &kp K            &kp H              &kp COMMA    &kp DOT          &mt QUESTION SLASH
&mkp MB3          &mkp MB1        &mkp MB2     &lt 6 TAB         &lt 3 ESCAPE  &lt 2 SPACE        &lt 1 ENTER    &lt 2 BACKSPACE                                                   &lt 1 DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &kp F12  &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                     &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SEMICOLON               &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &mt EQUAL PLUS  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp LSHFT          &kp LCTRL       &kp LALT              &kp LGUI
&mt LEFT_SHIFT KP_NUMBER_0  &kp NUMBER_1     &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD      &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &kp NUMBER_0    &kp MINUS                    &trans          &trans                                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW  &kp LC(TAB)              &trans                       &kp K_REDO  &kp K_PASTE     &kp K_COPY     &kp K_CUT       &kp K_UNDO
&kp LGUI        &kp LALT                &kp LCTRL     &kp LSHFT                &kp END  &trans      &trans  &caps_word  &kp LEFT_ARROW  &kp UP_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans        &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans      &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP     &kp END
&trans          &trans                  &trans        &trans                   &trans   &trans      &trans  &trans                                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3       &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &kp C_PLAY_PAUSE  &kp K_PREV    &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &kp K_NEXT
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans            &trans        &trans           &kp C_MUTE         &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                              &bt BT_CLR_ALL
            >;
        };
    };
};
